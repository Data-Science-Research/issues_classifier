from flask import Flask, render_template, request, jsonify
import classifiermodule
import sys
import itertools

app = Flask('issues_classifier')

@app.route('/')
def show_predict_stock_form():
    return render_template('predictorform.html')

@app.route('/results', methods=['POST'])
def results():
    form = request.form
    if request.method == 'POST':
      #write your function that loads the model
      model = classifiermodule.returnprediction(request.form['year']) #get_model() #you can use pickle to load the trained model
      year = request.form['year']
      predicted_stock_price = 'modelo' #model.predict(year)

      palavra = request.form['palavra']
      synonums = classifiermodule.returnsynonums(request.form['palavra'])

      return render_template('resultsform.html', year=year, predicted_price=model, palavra=palavra, sinonimo=synonums)

@app.route('/autocomplete', methods=['GET'])
def autocomplete():
    search = request.args.get('q') 
    searchsplit = search.split()    
    query = []
    queryAll = []
    permut = []
    for w in searchsplit:
    	try: 
    		returnsynonums = classifiermodule.returnsynonums(w)
    		queryAll.append(returnsynonums)
    		for s in returnsynonums:
    	   		query.append(s)
    	except:
    		queryAll.append([w])
    		print('Erro ao encontrar sin√¥nimos!', file=sys.stderr)     		    
    for x in range(0, len(queryAll)-1):
    	permut.append(itertools.product(queryAll[x], queryAll[x+1]))
    for r in permut:
    	for ra in r:
    	   	print(ra, file=sys.stderr) 
    results = [mv for mv in query]
    #print(queryAll, file=sys.stderr) 
    return jsonify(matching_results=results)

app.run("localhost", "9999", debug=True)